# Workflow will:
# - install Python dependencies;
# - lint and run tests with multiple Python versions.
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: test_application

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
        description: Application and source code folder name
      ci_image:
        type: string
        required: false
        default: ubuntu-22.04
        description: Github type of machine to run the workflow on
      python_versions:
        type: string
        required: false
        default: "['3.11','3.12','3.13']"
        description: Python versions to build workflow matrix
      lint:
        type: boolean
        required: false
        default: true
        description: Whether to lint application
      test:
        type: boolean
        required: false
        default: true
        description: Whether to test application

jobs:
  python:
    name: Test App
    runs-on: ${{ inputs.ci_image }}
    env:
      APP: ${{ inputs.app_name }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python_versions) }}

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}   # checkout the correct branch name
        fetch-depth: 0                # fetch the whole repo history

    - name: Git Version
      id: version
      uses: codacy/git-version@2.8.0
      with:
        release-branch: ${{ github.event.repository.default_branch }}

    - name: Set variables
      if: success()
      id: prepare
      shell: bash
      run: |
        echo version="${TAG%%-*}" >> "$GITHUB_OUTPUT"
      env:
        TAG: ${{ steps.version.outputs.version }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        make poetry_setup

    - name: Load cached venv
      id: cached-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-venv-python${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-dependencies.outputs.cache-hit != 'true'
      run: |
        make test_setup

    - name: Set project version
      run: |
        make set_version VERSION=${{ steps.prepare.outputs.version }}

    - name: Lint
      if: ${{ inputs.lint }}
      run: |
        make lint

    - name: Format
      if: ${{ inputs.lint }}
      run: |
        make format

    - name: Test
      if: ${{ inputs.test }}
      run: |
        python3 -c "import os, json; secrets_dict = json.loads(os.getenv('SECRETS_JSON')); open('.env', 'a').writelines([f'{key}={value}\n' for key, value in secrets_dict.items()])"
        make test_secrets_file
        make test
        rm -f .env
      env:
        SECRETS_JSON: ${{ toJSON(secrets) }}
